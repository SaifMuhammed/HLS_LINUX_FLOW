// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _simpleAlu_HH_
#define _simpleAlu_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "simpleAlu_sdiv_32bkb.h"
#include "simpleAlu_mul_32scud.h"
#include "simpleAlu_CRTL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct simpleAlu : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    simpleAlu(sc_module_name name);
    SC_HAS_PROCESS(simpleAlu);

    ~simpleAlu();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    simpleAlu_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* simpleAlu_CRTL_BUS_s_axi_U;
    simpleAlu_sdiv_32bkb<1,36,32,32,32>* simpleAlu_sdiv_32bkb_U1;
    simpleAlu_mul_32scud<1,2,32,32,32>* simpleAlu_mul_32scud_U2;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<37> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > A;
    sc_signal< sc_lv<32> > B;
    sc_signal< sc_lv<32> > op;
    sc_signal< sc_lv<32> > C;
    sc_signal< sc_logic > C_ap_vld;
    sc_signal< sc_lv<32> > op_read_read_fu_34_p2;
    sc_signal< sc_lv<32> > op_read_reg_87;
    sc_signal< sc_lv<32> > C_assign_1_fu_73_p2;
    sc_signal< sc_lv<32> > C_assign_fu_80_p2;
    sc_signal< sc_lv<32> > grp_fu_59_p2;
    sc_signal< sc_logic > ap_CS_fsm_state36;
    sc_signal< sc_lv<32> > grp_fu_66_p2;
    sc_signal< sc_logic > ap_CS_fsm_state37;
    sc_signal< sc_lv<32> > C_assign_1_fu_73_p0;
    sc_signal< sc_lv<32> > C_assign_1_fu_73_p1;
    sc_signal< sc_lv<32> > C_assign_fu_80_p0;
    sc_signal< sc_lv<32> > C_assign_fu_80_p1;
    sc_signal< sc_logic > grp_fu_59_ap_start;
    sc_signal< sc_logic > grp_fu_59_ap_done;
    sc_signal< sc_lv<37> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<37> ap_ST_fsm_state1;
    static const sc_lv<37> ap_ST_fsm_state2;
    static const sc_lv<37> ap_ST_fsm_state3;
    static const sc_lv<37> ap_ST_fsm_state4;
    static const sc_lv<37> ap_ST_fsm_state5;
    static const sc_lv<37> ap_ST_fsm_state6;
    static const sc_lv<37> ap_ST_fsm_state7;
    static const sc_lv<37> ap_ST_fsm_state8;
    static const sc_lv<37> ap_ST_fsm_state9;
    static const sc_lv<37> ap_ST_fsm_state10;
    static const sc_lv<37> ap_ST_fsm_state11;
    static const sc_lv<37> ap_ST_fsm_state12;
    static const sc_lv<37> ap_ST_fsm_state13;
    static const sc_lv<37> ap_ST_fsm_state14;
    static const sc_lv<37> ap_ST_fsm_state15;
    static const sc_lv<37> ap_ST_fsm_state16;
    static const sc_lv<37> ap_ST_fsm_state17;
    static const sc_lv<37> ap_ST_fsm_state18;
    static const sc_lv<37> ap_ST_fsm_state19;
    static const sc_lv<37> ap_ST_fsm_state20;
    static const sc_lv<37> ap_ST_fsm_state21;
    static const sc_lv<37> ap_ST_fsm_state22;
    static const sc_lv<37> ap_ST_fsm_state23;
    static const sc_lv<37> ap_ST_fsm_state24;
    static const sc_lv<37> ap_ST_fsm_state25;
    static const sc_lv<37> ap_ST_fsm_state26;
    static const sc_lv<37> ap_ST_fsm_state27;
    static const sc_lv<37> ap_ST_fsm_state28;
    static const sc_lv<37> ap_ST_fsm_state29;
    static const sc_lv<37> ap_ST_fsm_state30;
    static const sc_lv<37> ap_ST_fsm_state31;
    static const sc_lv<37> ap_ST_fsm_state32;
    static const sc_lv<37> ap_ST_fsm_state33;
    static const sc_lv<37> ap_ST_fsm_state34;
    static const sc_lv<37> ap_ST_fsm_state35;
    static const sc_lv<37> ap_ST_fsm_state36;
    static const sc_lv<37> ap_ST_fsm_state37;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_C();
    void thread_C_ap_vld();
    void thread_C_assign_1_fu_73_p0();
    void thread_C_assign_1_fu_73_p1();
    void thread_C_assign_1_fu_73_p2();
    void thread_C_assign_fu_80_p0();
    void thread_C_assign_fu_80_p1();
    void thread_C_assign_fu_80_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state36();
    void thread_ap_CS_fsm_state37();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_fu_59_ap_start();
    void thread_op_read_read_fu_34_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
