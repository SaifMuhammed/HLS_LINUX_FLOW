// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "simpleAlu.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic simpleAlu::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic simpleAlu::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<37> simpleAlu::ap_ST_fsm_state1 = "1";
const sc_lv<37> simpleAlu::ap_ST_fsm_state2 = "10";
const sc_lv<37> simpleAlu::ap_ST_fsm_state3 = "100";
const sc_lv<37> simpleAlu::ap_ST_fsm_state4 = "1000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state5 = "10000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state6 = "100000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state7 = "1000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state8 = "10000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state9 = "100000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state10 = "1000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state11 = "10000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state12 = "100000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<37> simpleAlu::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<32> simpleAlu::ap_const_lv32_0 = "00000000000000000000000000000000";
const int simpleAlu::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> simpleAlu::ap_const_lv32_1 = "1";
const sc_lv<32> simpleAlu::ap_const_lv32_23 = "100011";
const sc_lv<32> simpleAlu::ap_const_lv32_3 = "11";
const sc_lv<32> simpleAlu::ap_const_lv32_24 = "100100";
const sc_lv<32> simpleAlu::ap_const_lv32_2 = "10";
const bool simpleAlu::ap_const_boolean_1 = true;

simpleAlu::simpleAlu(sc_module_name name) : sc_module(name), mVcdFile(0) {
    simpleAlu_CRTL_BUS_s_axi_U = new simpleAlu_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("simpleAlu_CRTL_BUS_s_axi_U");
    simpleAlu_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    simpleAlu_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    simpleAlu_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    simpleAlu_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    simpleAlu_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    simpleAlu_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    simpleAlu_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    simpleAlu_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    simpleAlu_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    simpleAlu_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    simpleAlu_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    simpleAlu_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    simpleAlu_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    simpleAlu_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    simpleAlu_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    simpleAlu_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    simpleAlu_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    simpleAlu_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    simpleAlu_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    simpleAlu_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    simpleAlu_CRTL_BUS_s_axi_U->ap_start(ap_start);
    simpleAlu_CRTL_BUS_s_axi_U->interrupt(interrupt);
    simpleAlu_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    simpleAlu_CRTL_BUS_s_axi_U->ap_done(ap_done);
    simpleAlu_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    simpleAlu_CRTL_BUS_s_axi_U->A(A);
    simpleAlu_CRTL_BUS_s_axi_U->B(B);
    simpleAlu_CRTL_BUS_s_axi_U->op(op);
    simpleAlu_CRTL_BUS_s_axi_U->C(C);
    simpleAlu_CRTL_BUS_s_axi_U->C_ap_vld(C_ap_vld);
    simpleAlu_sdiv_32bkb_U1 = new simpleAlu_sdiv_32bkb<1,36,32,32,32>("simpleAlu_sdiv_32bkb_U1");
    simpleAlu_sdiv_32bkb_U1->clk(ap_clk);
    simpleAlu_sdiv_32bkb_U1->reset(ap_rst_n_inv);
    simpleAlu_sdiv_32bkb_U1->start(grp_fu_59_ap_start);
    simpleAlu_sdiv_32bkb_U1->done(grp_fu_59_ap_done);
    simpleAlu_sdiv_32bkb_U1->din0(A);
    simpleAlu_sdiv_32bkb_U1->din1(B);
    simpleAlu_sdiv_32bkb_U1->ce(ap_var_for_const0);
    simpleAlu_sdiv_32bkb_U1->dout(grp_fu_59_p2);
    simpleAlu_mul_32scud_U2 = new simpleAlu_mul_32scud<1,2,32,32,32>("simpleAlu_mul_32scud_U2");
    simpleAlu_mul_32scud_U2->clk(ap_clk);
    simpleAlu_mul_32scud_U2->reset(ap_rst_n_inv);
    simpleAlu_mul_32scud_U2->din0(B);
    simpleAlu_mul_32scud_U2->din1(A);
    simpleAlu_mul_32scud_U2->ce(ap_var_for_const0);
    simpleAlu_mul_32scud_U2->dout(grp_fu_66_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_C);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op_read_read_fu_34_p2 );
    sensitive << ( op_read_reg_87 );
    sensitive << ( C_assign_1_fu_73_p2 );
    sensitive << ( C_assign_fu_80_p2 );
    sensitive << ( grp_fu_59_p2 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( grp_fu_66_p2 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_C_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op_read_read_fu_34_p2 );
    sensitive << ( op_read_reg_87 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_C_assign_1_fu_73_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A );

    SC_METHOD(thread_C_assign_1_fu_73_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( B );

    SC_METHOD(thread_C_assign_1_fu_73_p2);
    sensitive << ( C_assign_1_fu_73_p0 );
    sensitive << ( C_assign_1_fu_73_p1 );

    SC_METHOD(thread_C_assign_fu_80_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( B );

    SC_METHOD(thread_C_assign_fu_80_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A );

    SC_METHOD(thread_C_assign_fu_80_p2);
    sensitive << ( C_assign_fu_80_p0 );
    sensitive << ( C_assign_fu_80_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_59_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op_read_read_fu_34_p2 );

    SC_METHOD(thread_op_read_read_fu_34_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( op_read_read_fu_34_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "simpleAlu_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, A, "A");
    sc_trace(mVcdFile, B, "B");
    sc_trace(mVcdFile, op, "op");
    sc_trace(mVcdFile, C, "C");
    sc_trace(mVcdFile, C_ap_vld, "C_ap_vld");
    sc_trace(mVcdFile, op_read_read_fu_34_p2, "op_read_read_fu_34_p2");
    sc_trace(mVcdFile, op_read_reg_87, "op_read_reg_87");
    sc_trace(mVcdFile, C_assign_1_fu_73_p2, "C_assign_1_fu_73_p2");
    sc_trace(mVcdFile, C_assign_fu_80_p2, "C_assign_fu_80_p2");
    sc_trace(mVcdFile, grp_fu_59_p2, "grp_fu_59_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, grp_fu_66_p2, "grp_fu_66_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, C_assign_1_fu_73_p0, "C_assign_1_fu_73_p0");
    sc_trace(mVcdFile, C_assign_1_fu_73_p1, "C_assign_1_fu_73_p1");
    sc_trace(mVcdFile, C_assign_fu_80_p0, "C_assign_fu_80_p0");
    sc_trace(mVcdFile, C_assign_fu_80_p1, "C_assign_fu_80_p1");
    sc_trace(mVcdFile, grp_fu_59_ap_start, "grp_fu_59_ap_start");
    sc_trace(mVcdFile, grp_fu_59_ap_done, "grp_fu_59_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("simpleAlu.hdltvin.dat");
    mHdltvoutHandle.open("simpleAlu.hdltvout.dat");
}

simpleAlu::~simpleAlu() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete simpleAlu_CRTL_BUS_s_axi_U;
    delete simpleAlu_sdiv_32bkb_U1;
    delete simpleAlu_mul_32scud_U2;
}

void simpleAlu::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void simpleAlu::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        op_read_reg_87 = op.read();
    }
}

void simpleAlu::thread_C() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        C = grp_fu_66_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                esl_seteq<1,32,32>(op_read_reg_87.read(), ap_const_lv32_3))) {
        C = grp_fu_59_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(ap_const_lv32_0, op_read_read_fu_34_p2.read()))) {
        C = C_assign_fu_80_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_1))) {
        C = C_assign_1_fu_73_p2.read();
    } else {
        C = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void simpleAlu::thread_C_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(ap_const_lv32_0, op_read_read_fu_34_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
          esl_seteq<1,32,32>(op_read_reg_87.read(), ap_const_lv32_3)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        C_ap_vld = ap_const_logic_1;
    } else {
        C_ap_vld = ap_const_logic_0;
    }
}

void simpleAlu::thread_C_assign_1_fu_73_p0() {
    C_assign_1_fu_73_p0 = A.read();
}

void simpleAlu::thread_C_assign_1_fu_73_p1() {
    C_assign_1_fu_73_p1 = B.read();
}

void simpleAlu::thread_C_assign_1_fu_73_p2() {
    C_assign_1_fu_73_p2 = (!C_assign_1_fu_73_p0.read().is_01() || !C_assign_1_fu_73_p1.read().is_01())? sc_lv<32>(): (sc_bigint<32>(C_assign_1_fu_73_p0.read()) - sc_bigint<32>(C_assign_1_fu_73_p1.read()));
}

void simpleAlu::thread_C_assign_fu_80_p0() {
    C_assign_fu_80_p0 = B.read();
}

void simpleAlu::thread_C_assign_fu_80_p1() {
    C_assign_fu_80_p1 = A.read();
}

void simpleAlu::thread_C_assign_fu_80_p2() {
    C_assign_fu_80_p2 = (!C_assign_fu_80_p0.read().is_01() || !C_assign_fu_80_p1.read().is_01())? sc_lv<32>(): (sc_bigint<32>(C_assign_fu_80_p0.read()) + sc_bigint<32>(C_assign_fu_80_p1.read()));
}

void simpleAlu::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void simpleAlu::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void simpleAlu::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void simpleAlu::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void simpleAlu::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void simpleAlu::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void simpleAlu::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void simpleAlu::thread_grp_fu_59_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_3))) {
        grp_fu_59_ap_start = ap_const_logic_1;
    } else {
        grp_fu_59_ap_start = ap_const_logic_0;
    }
}

void simpleAlu::thread_op_read_read_fu_34_p2() {
    op_read_read_fu_34_p2 = op.read();
}

void simpleAlu::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_2))) {
                ap_NS_fsm = ap_ST_fsm_state37;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && (esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_1) || 
  esl_seteq<1,32,32>(ap_const_lv32_0, op_read_read_fu_34_p2.read()) || 
  (!esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_2) && 
   !esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_3))))) {
                ap_NS_fsm = ap_ST_fsm_state36;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,32,32>(op_read_read_fu_34_p2.read(), ap_const_lv32_3))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<37>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void simpleAlu::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

